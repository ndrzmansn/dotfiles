{"mode":"editor","version":1,"windowDimensions":{"x":448,"y":22,"width":1024,"height":1174},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/zwei/Workspace/zippy/graal/com.oracle.truffle.api/src/com/oracle/truffle/api/instrument/impl","buffers":[{"text":"/*\n * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\npackage com.oracle.truffle.api.instrument.impl;\n\nimport java.io.*;\nimport java.util.*;\n\nimport com.oracle.truffle.api.*;\nimport com.oracle.truffle.api.instrument.*;\nimport com.oracle.truffle.api.nodes.*;\nimport com.oracle.truffle.api.nodes.NodeUtil.NodeClass;\nimport com.oracle.truffle.api.nodes.NodeUtil.NodeField;\nimport com.oracle.truffle.api.nodes.NodeUtil.NodeFieldKind;\n\n/**\n * A language-agnostic for printing out various pieces of a Truffle AST.\n */\npublic class DefaultASTPrinter implements ASTPrinter {\n\n    public DefaultASTPrinter() {\n    }\n\n    public void printTree(PrintWriter p, Node node, int maxDepth, Node markNode) {\n        printTree(p, node, maxDepth, markNode, 1);\n        p.println();\n        p.flush();\n    }\n\n    public String printTreeToString(Node node, int maxDepth, Node markNode) {\n        StringWriter out = new StringWriter();\n        printTree(new PrintWriter(out), node, maxDepth, markNode);\n        return out.toString();\n    }\n\n    public String printTreeToString(Node node, int maxDepth) {\n        return printTreeToString(node, maxDepth, null);\n    }\n\n    private static void printTree(PrintWriter p, Node node, int maxDepth, Node markNode, int level) {\n        if (node == null) {\n            p.print(\"null\");\n            return;\n        }\n\n        p.print(nodeName(node));\n\n        String sep = \"\";\n        p.print(\"(\");\n\n        final SourceSection src = node.getSourceSection();\n        if (src != null) {\n            if (!(src instanceof NullSourceSection)) {\n                p.print(src.getSource().getName() + \":\" + src.getStartLine());\n            }\n        }\n        if (node instanceof PhylumTagged) {\n            final PhylumTagged taggedNode = (PhylumTagged) node;\n            p.print(\"[\");\n            String prefix = \"\";\n            for (PhylumTag tag : taggedNode.getPhylumTags()) {\n                p.print(prefix);\n                prefix = \",\";\n                p.print(tag.toString());\n            }\n            p.print(\"]\");\n        }\n\n        ArrayList<NodeField> childFields = new ArrayList<>();\n\n        for (NodeField field : NodeClass.get(node.getClass()).getFields()) {\n            if (field.getKind() == NodeFieldKind.CHILD || field.getKind() == NodeFieldKind.CHILDREN) {\n                childFields.add(field);\n            } else if (field.getKind() == NodeFieldKind.DATA) {\n                // p.print(sep);\n                // sep = \", \";\n                //\n                // final String fieldName = field.getName();\n                // switch (fieldName) {\n                //\n                // }\n                // p.print(fieldName);\n                // p.print(\" = \");\n                // p.print(field.loadValue(node));\n            }\n        }\n        p.print(\")\");\n\n        if (level <= maxDepth) {\n\n            if (childFields.size() != 0) {\n                p.print(\" {\");\n                for (NodeField field : childFields) {\n\n                    Object value = field.loadValue(node);\n                    if (value == null) {\n                        printNewLine(p, level);\n                        p.print(field.getName());\n                        p.print(\" = null \");\n                    } else if (field.getKind() == NodeFieldKind.CHILD) {\n                        final Node valueNode = (Node) value;\n                        printNewLine(p, level, valueNode == markNode);\n                        p.print(field.getName());\n                        p.print(\" = \");\n                        printTree(p, valueNode, maxDepth, markNode, level + 1);\n                    } else if (field.getKind() == NodeFieldKind.CHILDREN) {\n                        printNewLine(p, level);\n                        p.print(field.getName());\n                        Node[] children = (Node[]) value;\n                        p.print(\" = [\");\n                        sep = \"\";\n                        for (Node child : children) {\n                            p.print(sep);\n                            sep = \", \";\n                            printTree(p, child, maxDepth, markNode, level + 1);\n                        }\n                        p.print(\"]\");\n                    } else {\n                        printNewLine(p, level);\n                        p.print(field.getName());\n                    }\n                }\n                printNewLine(p, level - 1);\n                p.print(\"}\");\n            }\n        }\n    }\n\n    private static void printNewLine(PrintWriter p, int level, boolean mark) {\n        p.println();\n        for (int i = 0; i < level; i++) {\n            if (mark && i == 0) {\n                p.print(\" -->\");\n            } else {\n                p.print(\"    \");\n            }\n        }\n    }\n\n    private static void printNewLine(PrintWriter p, int level) {\n        printNewLine(p, level, false);\n    }\n\n    private static String nodeName(Node node) {\n        return node.getClass().getSimpleName();\n    }\n\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":9},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zwei/Workspace/zippy/graal/com.oracle.truffle.api/src/com/oracle/truffle/api/instrument/impl/DefaultASTPrinter.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d49f7a59211923a07435884a5ced7c1951934829","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":9,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":10,"softWrap":false,"editorWidthInChars":80,"tokenizedBuffer":{"bufferPath":"/Users/zwei/Workspace/zippy/graal/com.oracle.truffle.api/src/com/oracle/truffle/api/instrument/impl/DefaultASTPrinter.java","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/zwei/Workspace/zippy/graal/com.oracle.truffle.api/src/com/oracle/truffle/api/instrument/impl/DefaultASTPrinter.java","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/zwei/Workspace/zippy/graal/com.oracle.truffle.api/src/com/oracle/truffle/api/instrument/impl/DefaultASTPrinter.java":1400909869697},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":5492},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/zwei/Workspace/zippy/graal/com.oracle.truffle.api/src/com/oracle/truffle/api/instrument/impl/DefaultASTPrinter.java","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}